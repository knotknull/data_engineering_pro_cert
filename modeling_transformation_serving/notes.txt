## Data Modeling, Transformation and Serving
## Course 4
## Week 1

# Introduction to Data Modeling for Analytics

Overview

Data Modeling: A data model organizes and standardizes data in a precise structured representation 
              to enable and guide human and machine behavior, inform decision-making and facilitate actions 




Define the structure, relastionshiops and meaning of data.

Structure the data in a way that connects back to the organization
    - Data is understandable and valuable


Good Data Models 
    - Reflect the business goals and logic while incorporating business rules
    - Ensure compliance with operational standards and legal requirements
    - Outline the relationships between business processes
    - Serve as a powerful communication too, creating a "shared language"

ex. what is "an active users"



Poor Data Models 
    - Don't reflect how the busienss operates
    - Create more problems than they solve
    - Provide stakeholders with innaccurate information 
        and create confusion 


Targeted Data Modeling Approach
- Focus on specific business domains 

    Marketing:  Better understand customer behavior and campaign effectiveness
    Finance  :  Analyze spending patterns and identify cost-saving opportunities
    Machine Learning  :  Drive better decision-making and impactful AI models

# Conceptual, Logical and Physical Data Modeling


Conceptual:
    - describes business entities, relationships and attributes
    - business logic and rules
        - Entity - Relationshiop Diagram (ER)  (1 to 1, 1 to Many)

Logical 
    - details about the implementation of the conceptual model
        - column types, primary / foreign keys

Physical 
    - Details about the implementation of the logical model in a specific DBMS
    - Configuration details 
        - Data storage approach
        - Partitioning details
        - Replication details


# Normalization 


Normalization:  A data modeling practice typically applied to relational databases
                to remove the redundancy of data within a database and ensure referential 
                integrity between tables.

Edgar Codd's Objectives of Normalization 

    - To free the collections of relations from undesireable insertion, 
       update and deletion dependencies

    - To reduce the need for restructuring the collection of relations as 
       new types of data are intruduced



    Reduce Data Redundancy: Eliminating duplicate data saves storage space and ensures consistency across the database.
    Improve Data Integrity: Ensuring that each piece of data is stored in only one place reduces the likelihood of data anomalies and maintains the accuracy of the data.
    Enhance Update/Delete Query Performance




SalesOrders 
Denormalized Form 
 - contains redundant data 
 - contains nested data

OrderID         OrderItems              CustomerID      Customer Name   address     OrderDate

 101           [{                             5               Joe Reis    1st. St     1/08/2024
                "sku":1,
                "price":50,
                "quantity":1,
                "name": "Thigamajig",
               },{
                "sku":2,
                "price":50,
                "quantity":1,
                "name": "Whatchmacallit",
               }]

 102           [{                             5               Matt Housley    1st. St     1/08/2024
                "sku":3,
                "price":75,
                "quantity":1,
                "name": "Whoozeewhatzit",
               },{
                "sku":1,
                "price":50,
                "quantity":1,
                "name": "Thigamajig",
               }]
 

First Normal Form (1NF): 
    - Each column must be 
        - unique
        - have a single value
    - Unique Primary Key

  composite key
+---------------+
OrderID   Item Number  sku    price   quantity    name          CustomerID  CustomerName        address     OrderDate
100         1           1       50      1       Thingamajig         5           Joe Reis        1st St.     1/8/2024
100         2           2       25      2       Watchamcallit       5           Joe Reis        1st St.     1/8/2024
101         1           3       75      1       Whoozeewhatzit      7           Matt Housely    2nd Ave.    1/8/2024
101         2           2       25      3       Watchamcallit       7           Matt Housely    2nd Ave.    1/8/2024
---                                                                    +----------------------------------------------+
 |                                                                                           | 
 +------------------------------------------------------------------------------------------+
                                                                         Non-key columns that depend on OrderID 
                                                                    i.e. if you know an OrderID you would know the customer                        
Second Normal Form (2NF):
    - Requirements of 1NF must be met  
    - Partial dependencies should be removed

NOTE: 
Partial Dependency: A subset of non-key columns that depend on some columns in the composite key

Split to two tables: OrderItems and Orders

OrderItems                                                       Orders                                                       
+---------------------------------------------------------+     +----------------------------------------------------+
OrderID   Item Number  sku    price   quantity    name          OrderID CustomerID  CustomerName        address     OrderDate
100         1           1       50      1       Thingamajig       100       5           Joe Reis        1st St.     1/8/2024 
100         2           2       25      2       Watchamcallit     101       7           Matt Housely    2nd Ave.    1/8/2024  
101         1           3       75      1       Whoozeewhatzit      
101         2           2       25      3       Watchamcallit       


These two tables now have a Transitive Dependency 
Transitive Dependency:
  - A non-key column depends on another non-key column 

    OrderItems:
        price and name depend on sku

    Orders:
        CustomerName and address depend on CustomerID 


Third Normal Form (3NF):
    - Requirements of 2NF must be met  
    - Transitive dependencies should be removed


OrderItems                                  Orders                           Orders
+------------------------------------+     +----------------------------+   +------------------------------------+
OrderID   Item Number  sku    quantity      OrderID CustomerID  OrderDate    CustomerID  CustomerName     address
100         1           1       50            100       5        1/8/2024     5           Joe Reis        1st St.  
100         2           2       25            101       7        1/8/2024     7           Matt Housely    2nd Ave. 
101         1           3       75     
101         2           2       25    

                                                                                Items                                  
                                                                               +----------------------------+  
                                                                                sku   price    name
                                                                                1       50      Thingamajig 
                                                                                2       25      Watchamcallit   
                                                                                3       75      Whoozeewhatzit      




# Dimensin Modeling: Star Schema
                                                                         
                                                                [Dim]  [Dim]  [Dim]
    Fact Table     :  business measures                            \     |     /
    Dimension Table:  Contextual Informtion                         \    |    /
                                                                    \   |   / 
                                                            [Dim]----- [Fact] -----[Dim] 
                                                                         |
                                                                         |
                                                                       [Dim]

Fact Table: contains quantitative business measurements that result from a business event or process
       - Each row contins the facts of a particular business event 
       - Data in Fact table is immutable (append-only)
       - Typically narrow and long
            - not alot of columns but alot of rows


Business Event          Facts                          Grain (detail of Fact)                       Dimensions
order a ride share      Trip duration, trip price      - all rides by all customers in one day,     - customers
                        tip paid, trip delays, etc.    - all rides by one customer on one day       - drivers
                                                            - one ride by one customer              - trip locations

Atomic Grain: most detailed level of a business proces


Dimension Table: Provide the reference data, attributes and relational context for the events in the fact table
        - Describe the events' what, who, where and when  
        - Typically wide and short
            - many columns fewer rows 



Conformed Dimension:  Dimension table used with multiple fact tables
                [Dim]  [Dim]  [Dim]                [Dim]  [Dim]  [Dim]
                  \     |     /                      \     |     /
                   \    |    /                        \    |    /
                    \   |   /                          \   |   /
           [Dim]----- [Fact] ----------[Dim]------------ [Fact] -----[Dim] 
                        |                                   |
                        |                                   |
                      [Dim]                               [Dim]

Each DIM   has a PKey
Fact table has a PKey
Fact connected to Dim via FKey

Best practice:  create a surrogate key 
                    - used to combine data from differnt source systems with 
                      natural primary keys that are in different formats

                    - used to decouple the primary key of the star schema from source systems


Analytical Queries:
    - Apply aggregate queries to find the sum, average, maximum of fact
    - Use dim tables to filter or group facts


         [ dim_customers ]                   [ fact_orders ]               [ dim_products ]
         customerNumber (pk)+--+            OrderLineNumber (pk)    +---- productCode (pk)
         customerName          |            OrderNumber     (pk)    |     productName
         contactLastName       +-----------+customerNumber  (fk)    |     productLine
         contactFirstName                   postalCode      (fk)-+  |     productScale
         phone                              productCode     (fk)-|- +     productVendor
         addressLine1                       orderDate            |        productDescription
         addressLine2                       quantityOrdered      |        productLineDescription
                                            priceEac             |
                                            buyPrice             |  
                                            orderAmount          | 
                                            MSRP                 | 
                                                                 | 
                                            [dim_location]       | 
                                            postalCode (PK) +----+
                                            city 
                                            state 
                                            country 


ex. Find the total sales amount for each product line within the usa
SELECT  
  dim_product.productLine, 
  SUM(fact_orders.orderAmount) AS total_sales
FROM fact_orders 
JOIN dim_product ON 
  fact_orders.productCode =       
  dim_products.productCode       
JOIN dim_locations ON 
  fact_orders.postalCode =       
  dim_locations.postalCode
WHERE dim_locations.country = 'USA' 
GROUP by dim_products.productLine         


Star Schema vs 3NF

 - Star Schema organizes data so it's easier for business users to understand, navigate and use
 - Star Schema results in simpler queries with fewer joins



.